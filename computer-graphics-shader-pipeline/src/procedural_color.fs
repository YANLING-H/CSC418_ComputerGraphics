// Set the pixel color to an interesting procedural color generated by mixing
// and filtering Perlin noise of different frequencies.
//
// Uniforms:
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
in vec3 sphere_fs_in;
in vec3 normal_fs_in;
in vec4 pos_fs_in; 
in vec4 view_pos_fs_in; 
// Outputs:
out vec3 color;

// expects: blinn_phong, perlin_noise
void main()
{
  // Copy from lit.fs
  float light_dist = 4.0;
  float light_orbit_period = 8.0;
  float theta = -mod(animation_seconds, light_orbit_period) * 2 * M_PI / light_orbit_period;

  vec4 light_pos = vec4(light_dist, light_dist, light_dist, 1.0);
  mat4 light_transform = mat4(
  cos(theta), 0, -sin(theta), 0,
           0, 1,           0, 0,
  sin(theta), 0,  cos(theta), 0,
           0, 0,           0, 1);
  vec4 light = view * light_transform * light_pos;  

  vec3 ka, kd, ks;
  vec3 n, v, l;
  float p;

  // Generate noise
  float noise1 = perlin_noise(vec3(0.1 * normal_fs_in.x * sphere_fs_in.x, 3.5 * sin(sphere_fs_in.y), 1.5 * cos(sphere_fs_in.x * sphere_fs_in.z)));
  float noise2 = 2.5 * (sphere_fs_in.y + sphere_fs_in.z + sphere_fs_in.x * perlin_noise(7.5 * vec3(2.0 * sin(sphere_fs_in.y), 1.5 * cos(sphere_fs_in.y), 3.0 * tan(sphere_fs_in.y))));
  float noise3 = 3.5 * perlin_noise(2.5 * vec3(2.5 * sin(normal_fs_in.x), 7.5 * cos(normal_fs_in.y), 7.5 * tan(normal_fs_in.y / normal_fs_in.x)));

  if (is_moon){
     color = vec3(0.2 * (1 + clamp(noise2, 0.0, 0.2)) * noise2, 0.2 * noise2, 0.2 * noise2);
     ka = color * 0.1;
     kd = color * (0.7 + 0.01 * noise2);
     ks = vec3(1.0) * (0.4 + 0.01 * noise1);
     p = 100;
  } else {
     color = vec3(0.01, 0.1 + 0.01 * noise2, 0.1 * noise2 + 1.5 * noise1 + 0.05 * noise3);
     ka = color * 0.1;
     kd = color * (0.8 + 0.01 * noise2);
     ks = vec3(1.0) * (0.7 + noise1);
     p = 1000;
  }

  n = normalize(normal_fs_in);
  v = -normalize(view_pos_fs_in.xyz);
  l = normalize(light.xyz - view_pos_fs_in.xyz);

  color = blinn_phong(ka, kd, ks, p, n, v, l);
}
